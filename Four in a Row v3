//Yoav Trifman - 312278260
//Project 1
//4 In A Row Game
//Lecturer- Ms. Adi Marinov
//

#define _CRT_SECURE_NO_WARNINGS
#include "stdio.h"
#include "stdlib.h"
#include <stdbool.h>

/*************** Board ***************/
#define ROWS 6
#define COLS 7
char board[ROWS][COLS];

const BOARD_SIZE = ROWS * COLS;
const INITIAL_STEPS = 6;
bool gameFinished = false;
bool fullCol = false;
int turnCount = 1;
int playerTurn = 1;
int playerColInpt = 0;
int row = 1;
char playerSymbol = 'X';



/*********** Declarations ************/

 //This function initializes the game board by assigning each cell
 //with ' ' (resulting with an empty game board).
void initBoard();

//This function gets a row number and a column number (a cell),
//and returns the character in that cell (could be 'X', 'O' or ' ').
//For example:
//char c = getCell(1, 1);
char getCell(int row, int col);

//This function gets a row number, a column number and a sign,
//and assigns the cell with the given sign.
//For example:
//setCell(1, 1, 'X');
void setCell(int row, int col, char sign);
//This function clears the screen.
void clearScreen();

void playGame();
void printCurrentBoard();
void doPlayerTurn();
void checkPlayerInput();
void switchPlayer();
void announceWinner();
void drawGame();
void checkFour();



/*************** Main ****************/
int main()
{
	initBoard();
	playGame();
}


/********** Implementations **********/
char getCell(int row, int col)
{
	return board[7 - row][col];
}

void setCell(int row, int col, char sign)
{
	board[7 - row][col] = sign;
	return;
}

void initBoard()
{
	int i, j;

	for (i = 0; i < ROWS; i++)
	{
		for (j = 0; j < COLS; j++)
		{
			setCell(i + 1, j + 1, ' ');
		}
	}
}

void clearScreen()
{
	system("cls");
}


void playGame() {
	
	printCurrentBoard();

	while (!gameFinished && turnCount < BOARD_SIZE + 1) {

		doPlayerTurn();
		clearScreen();
		printCurrentBoard();
		if (turnCount > INITIAL_STEPS) { //no need to check for winner before the 7th turn
			checkFour();
		}	
		if (!gameFinished) 
			switchPlayer();
	}

	if (gameFinished)
	{
		announceWinner();
		return;
	}
	else
	{
		drawGame();
		return;
	}
	
}




/***************Prints Board with all inputs entered thus far****************/
void printCurrentBoard()
{
	for (int i = 0; i < ROWS + 1; i++) {
		if (!i) printf("  ");
		else printf("\n %c", i - 1 + 'A');

		for (int j = 1; j < COLS + 1; j++) {
			if (!i) printf("%d  ", j);
			else printf("%c  ", board[i][j]);

		}
	}

	return;
}


/*************Asks for input, checks for winner, rotates turns, calls printCurrentBoard ()***********/
void doPlayerTurn()
{
	row = 1;
	if (fullCol) {
		printf("\nColumn is full! Please try one of the other columns.\n");
		turnCount = turnCount - 2;
		fullCol = false;
	}
	printf("\nPlayer number %d:\n", playerTurn);
	printf("Enter column input (a number between 1-7): ");
	scanf("%d", &playerColInpt);
	checkPlayerInput();
	if (fullCol) {
		switchPlayer();
		return;
	}
	//sets cell to input after passing eligibility requirements
	setCell(row, playerColInpt, playerSymbol);

	return;

}

void checkPlayerInput() {
	
	//checks if input is between 1-7
	while (playerColInpt > 7) {
		printf("Error: The number you entered is larger than 7.\nPlease try again:\n");
		scanf("%d", &playerColInpt);
	}
	while (playerColInpt < 0) {
		printf("Error: The number you entered is smaller than 0.\nPlease try again:\n");
		scanf("%d", &playerColInpt);
	}

	//if col is full printf ("Error: column is full. please try a different one:\n");
	while (getCell(row, playerColInpt) == 'X' || getCell(row, playerColInpt) == 'O')
	{
		for (int i = 1; i < 7; i++)
		{
			if ((getCell(i, playerColInpt)) != ' ')
				row++;
		}

		if (row == 7) {
			fullCol = true;
			return;
		}

	}

	return;
}

void switchPlayer() {
	//rotates turns
	turnCount++;
	if (playerTurn == 1) {
		playerTurn = 2;
		playerSymbol = 'O';
	}
	else {
		playerTurn = 1;
		playerSymbol = 'X';
	}
}




/*************** checks for a winner of four in a row/column/zig/zag ****************/
void checkFour()
{

	for (int i = 0; i < ROWS + 1; i++) {

		for (int j = 1; j < COLS + 1; j++) {

			//checks 4 in a column
			if ((getCell(i, j) == playerSymbol) && (getCell(i, j) == getCell(i - 1, j)) && (getCell(i - 1, j) == getCell(i - 2, j)) && getCell(i - 2, j) == getCell(i - 3, j))
				gameFinished = true;
			if (gameFinished) return; //skips other unnecessary tests once finds 4 in a row

			//checks 4 in a row
			if ((getCell(i, j) == playerSymbol) && (getCell(i, j) == getCell(i, j - 1)) && (getCell(i, j - 1) == getCell(i, j - 2)) && (getCell(i, j - 2) == getCell(i, j - 3))) 
				gameFinished = true;
			if (gameFinished) return;

			//checks 4 in a zig
			if ((getCell(i, j) == playerSymbol) && (getCell(i, j) == getCell(i - 1, j - 1)) && (getCell(i - 1, j - 1) == getCell(i - 2, j - 2)) && (getCell(i - 2, j - 2) == getCell(i - 3, j - 3))) 
				gameFinished = true;
			if (gameFinished) return;

			//checks 4 in a zag
			if ((getCell(i, j) == playerSymbol) && (getCell(i, j) == getCell(i + 1, j - 1)) && (getCell(i + 1, j - 1) == getCell(i + 2, j - 2)) && (getCell(i + 2, j - 2) == getCell(i + 3, j - 3))) 
				gameFinished = true;
			if (gameFinished) return;
		}
	}
	return;
}


/*************** Announces winner ****************/
void announceWinner ()
{
	printf("\nPlayer %d wins! :))\n", playerTurn);
	return;
}

void drawGame()
{
	printf("\nGame is tied. No winners :/\n");
	return;
}
